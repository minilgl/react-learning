{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport NativeSelectInput from './NativeSelectInput';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport Input from '../Input';\nimport useThemeProps from '../styles/useThemeProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst defaultInput = /*#__PURE__*/_jsx(Input, {});\n/**\n * An alternative to `<Select native />` with a much smaller bundle size footprint.\n */\n\n\nconst NativeSelect = /*#__PURE__*/React.forwardRef(function NativeSelect(inProps, ref) {\n  const props = useThemeProps({\n    name: 'MuiNativeSelect',\n    props: inProps\n  });\n\n  const {\n    className,\n    children,\n    classes,\n    IconComponent = ArrowDropDownIcon,\n    input = defaultInput,\n    inputProps\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"className\", \"children\", \"classes\", \"IconComponent\", \"input\", \"inputProps\", \"variant\"]);\n\n  const muiFormControl = useFormControl();\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['variant']\n  });\n  return /*#__PURE__*/React.cloneElement(input, _extends({\n    // Most of the logic is implemented in `NativeSelectInput`.\n    // The `Select` component is a simple API wrapper to expose something better to play with.\n    inputComponent: NativeSelectInput,\n    inputProps: _extends({\n      children,\n      classes,\n      IconComponent,\n      variant: fcs.variant,\n      type: undefined\n    }, inputProps, input ? input.props.inputProps : {}),\n    ref\n  }, other, {\n    className: clsx(className, input.props.className)\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? NativeSelect.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The option elements to populate the select with.\n   * Can be some `<option>` elements.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The icon that displays the arrow.\n   * @default ArrowDropDownIcon\n   */\n  IconComponent: PropTypes.elementType,\n\n  /**\n   * An `Input` element; does not have to be a material-ui specific `Input`.\n   * @default <Input />\n   */\n  input: PropTypes.element,\n\n  /**\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes\">Attributes</a> applied to the `select` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Callback fired when a menu item is selected.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object,\n\n  /**\n   * The `input` value. The DOM API casts this to a string.\n   */\n  value: PropTypes.any,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nNativeSelect.muiName = 'Select';\nexport default NativeSelect;","map":{"version":3,"sources":["D:/PROJECT/react-learning/node_modules/@material-ui/core/NativeSelect/NativeSelect.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","clsx","PropTypes","NativeSelectInput","formControlState","useFormControl","ArrowDropDownIcon","Input","useThemeProps","jsx","_jsx","defaultInput","NativeSelect","forwardRef","inProps","ref","props","name","className","children","classes","IconComponent","input","inputProps","other","muiFormControl","fcs","states","cloneElement","inputComponent","variant","type","undefined","process","env","NODE_ENV","propTypes","node","object","string","elementType","element","onChange","func","sx","value","any","oneOf","muiName"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport NativeSelectInput from './NativeSelectInput';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport ArrowDropDownIcon from '../internal/svg-icons/ArrowDropDown';\nimport Input from '../Input';\nimport useThemeProps from '../styles/useThemeProps';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst defaultInput = /*#__PURE__*/_jsx(Input, {});\n/**\n * An alternative to `<Select native />` with a much smaller bundle size footprint.\n */\n\n\nconst NativeSelect = /*#__PURE__*/React.forwardRef(function NativeSelect(inProps, ref) {\n  const props = useThemeProps({\n    name: 'MuiNativeSelect',\n    props: inProps\n  });\n\n  const {\n    className,\n    children,\n    classes,\n    IconComponent = ArrowDropDownIcon,\n    input = defaultInput,\n    inputProps\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"className\", \"children\", \"classes\", \"IconComponent\", \"input\", \"inputProps\", \"variant\"]);\n\n  const muiFormControl = useFormControl();\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['variant']\n  });\n  return /*#__PURE__*/React.cloneElement(input, _extends({\n    // Most of the logic is implemented in `NativeSelectInput`.\n    // The `Select` component is a simple API wrapper to expose something better to play with.\n    inputComponent: NativeSelectInput,\n    inputProps: _extends({\n      children,\n      classes,\n      IconComponent,\n      variant: fcs.variant,\n      type: undefined\n    }, inputProps, input ? input.props.inputProps : {}),\n    ref\n  }, other, {\n    className: clsx(className, input.props.className)\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? NativeSelect.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The option elements to populate the select with.\n   * Can be some `<option>` elements.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The icon that displays the arrow.\n   * @default ArrowDropDownIcon\n   */\n  IconComponent: PropTypes.elementType,\n\n  /**\n   * An `Input` element; does not have to be a material-ui specific `Input`.\n   * @default <Input />\n   */\n  input: PropTypes.element,\n\n  /**\n   * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes\">Attributes</a> applied to the `select` element.\n   */\n  inputProps: PropTypes.object,\n\n  /**\n   * Callback fired when a menu item is selected.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.object,\n\n  /**\n   * The `input` value. The DOM API casts this to a string.\n   */\n  value: PropTypes.any,\n\n  /**\n   * The variant to use.\n   */\n  variant: PropTypes.oneOf(['filled', 'outlined', 'standard'])\n} : void 0;\nNativeSelect.muiName = 'Select';\nexport default NativeSelect;"]},"metadata":{},"sourceType":"module"}